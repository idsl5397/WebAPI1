// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI1.Context;

#nullable disable

namespace WebAPI1.Migrations
{
    [DbContext(typeof(ISHAuditDbcontext))]
    [Migration("20250710033221_password1")]
    partial class password1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebAPI1.Entities.DataChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("OperationType")
                        .HasColumnType("tinyint");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DataChangeLogs");
                });

            modelBuilder.Entity("WebAPI1.Entities.KpiCycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CycleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EndYear")
                        .HasColumnType("int");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("KpiCycles");
                });

            modelBuilder.Entity("WebAPI1.Entities.KpiData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("BaselineValue")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("BaselineYear")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DetailItemId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApplied")
                        .HasColumnType("bit");

                    b.Property<int?>("KpiCycleId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("ProductionSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TargetValue")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DetailItemId");

                    b.HasIndex("KpiCycleId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("KpiDatas");
                });

            modelBuilder.Entity("WebAPI1.Entities.KpiDetailItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ComparisonOperator")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsIndicator")
                        .HasColumnType("bit");

                    b.Property<int>("KpiItemId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("KpiItemId");

                    b.ToTable("KpiDetailItems");
                });

            modelBuilder.Entity("WebAPI1.Entities.KpiDetailItemName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<int>("KpiDetailItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("KpiDetailItemId");

                    b.HasIndex("UserEmail");

                    b.ToTable("KpiDetailItemNames");
                });

            modelBuilder.Entity("WebAPI1.Entities.KpiField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("enfield")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("field")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("KpiFields");
                });

            modelBuilder.Entity("WebAPI1.Entities.KpiItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("IndicatorNumber")
                        .HasColumnType("int");

                    b.Property<int>("KpiCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("KpiFieldId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("KpiFieldId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("IndicatorNumber", "KpiCategoryId", "OrganizationId", "KpiFieldId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("KpiItems");
                });

            modelBuilder.Entity("WebAPI1.Entities.KpiItemName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<int>("KpiItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("KpiItemId");

                    b.HasIndex("UserEmail");

                    b.ToTable("KpiItemNames");
                });

            modelBuilder.Entity("WebAPI1.Entities.KpiReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSkipped")
                        .HasColumnType("bit");

                    b.Property<int>("KpiDataId")
                        .HasColumnType("int");

                    b.Property<decimal?>("KpiReportValue")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KpiDataId", "Year", "Period")
                        .IsUnique();

                    b.HasIndex(new[] { "KpiDataId" }, "IX_KpiReports_KpiDataId");

                    b.ToTable("KpiReports");
                });

            modelBuilder.Entity("WebAPI1.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("IsActive")
                        .HasColumnType("tinyint");

                    b.Property<string>("Lable")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MenuType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("WebAPI1.Entities.MenuRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("MenusRoles");
                });

            modelBuilder.Entity("WebAPI1.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("TaxId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UseParentDomainVerification")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.HasIndex("TypeId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("WebAPI1.Entities.OrganizationDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSharedWithChildren")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationDomains");
                });

            modelBuilder.Entity("WebAPI1.Entities.OrganizationHierarchy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChildTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxChildren")
                        .HasColumnType("int");

                    b.Property<int>("ParentTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChildTypeId");

                    b.HasIndex("ParentTypeId", "ChildTypeId")
                        .IsUnique();

                    b.ToTable("OrganizationHierarchies");
                });

            modelBuilder.Entity("WebAPI1.Entities.OrganizationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanHaveChildren")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TypeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("TypeCode")
                        .IsUnique();

                    b.ToTable("OrganizationTypes");
                });

            modelBuilder.Entity("WebAPI1.Entities.PasswordPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowUserOverride")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("LockoutDurationMinutes")
                        .HasColumnType("int");

                    b.Property<int>("LockoutThreshold")
                        .HasColumnType("int");

                    b.Property<int>("MaxLength")
                        .HasColumnType("int");

                    b.Property<int>("MinLength")
                        .HasColumnType("int");

                    b.Property<int>("MinUniqueChars")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PasswordExpiryDays")
                        .HasColumnType("int");

                    b.Property<int>("PasswordExpiryWarningDays")
                        .HasColumnType("int");

                    b.Property<int>("PasswordHistoryCount")
                        .HasColumnType("int");

                    b.Property<bool>("PreventCommonWords")
                        .HasColumnType("bit");

                    b.Property<bool>("PreventUsernameInclusion")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireLowercase")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireNumber")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireSpecialChar")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireUppercase")
                        .HasColumnType("bit");

                    b.Property<string>("SpecialChars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationTypeId");

                    b.ToTable("PasswordPolicy");
                });

            modelBuilder.Entity("WebAPI1.Entities.SuggestDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("SuggestEventTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SuggestEventTypeId");

                    b.ToTable("SuggestDates");
                });

            modelBuilder.Entity("WebAPI1.Entities.SuggestEventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SuggestEventTypes");
                });

            modelBuilder.Entity("WebAPI1.Entities.SuggestFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("Quarter")
                        .HasColumnType("int");

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ReportType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("SuggestFiles");
                });

            modelBuilder.Entity("WebAPI1.Entities.SuggestReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte?>("Completed")
                        .HasColumnType("tinyint");

                    b.Property<string>("CompletedOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoneMonth")
                        .HasColumnType("int");

                    b.Property<int?>("DoneYear")
                        .HasColumnType("int");

                    b.Property<string>("ExecPlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImproveDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("IsAdopted")
                        .HasColumnType("tinyint");

                    b.Property<string>("IsAdoptedOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("KpiFieldId")
                        .HasColumnType("int");

                    b.Property<int?>("Manpower")
                        .HasColumnType("int");

                    b.Property<byte?>("ParallelExec")
                        .HasColumnType("tinyint");

                    b.Property<string>("ParallelExecOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RespDept")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuggestDateId")
                        .HasColumnType("int");

                    b.Property<string>("SuggestionContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuggestionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("KpiFieldId");

                    b.HasIndex("SuggestDateId");

                    b.HasIndex("SuggestionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("SuggestReports");
                });

            modelBuilder.Entity("WebAPI1.Entities.SuggestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SuggestionTypes");
                });

            modelBuilder.Entity("WebAPI1.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ForceChangePassword")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastPasswordExpiryReminder")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mobile")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Nickname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PasswordChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PasswordExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PasswordFailedAttempts")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordLockedUntil")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PasswordPolicyId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDomain")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("TokenExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("VerificationToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationTypeId");

                    b.HasIndex("Username", "Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebAPI1.Entities.UserInfoName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("Auth")
                        .HasColumnType("tinyint");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("email");

                    b.Property<int?>("EnterpriseId")
                        .HasColumnType("int");

                    b.Property<int?>("FactoryId")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .HasColumnType("varchar(40)")
                        .HasColumnName("mobile");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("UserInfoNames");
                });

            modelBuilder.Entity("WebAPI1.Entities.UserPasswordHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("StrengthScore")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UserId", "CreatedAt");

                    b.ToTable("UserRPasswordHistories");
                });

            modelBuilder.Entity("WebAPI1.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AssignedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("WebAPI1.Entities.KpiData", b =>
                {
                    b.HasOne("WebAPI1.Entities.KpiDetailItem", "DetailItem")
                        .WithMany("KpiDatas")
                        .HasForeignKey("DetailItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI1.Entities.KpiCycle", "KpiCycle")
                        .WithMany("KpiDatas")
                        .HasForeignKey("KpiCycleId");

                    b.HasOne("WebAPI1.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.Navigation("DetailItem");

                    b.Navigation("KpiCycle");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("WebAPI1.Entities.KpiDetailItem", b =>
                {
                    b.HasOne("WebAPI1.Entities.KpiItem", "KpiItem")
                        .WithMany("KpiDetailItems")
                        .HasForeignKey("KpiItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KpiItem");
                });

            modelBuilder.Entity("WebAPI1.Entities.KpiDetailItemName", b =>
                {
                    b.HasOne("WebAPI1.Entities.KpiDetailItem", "KpiDetailItem")
                        .WithMany("KpiDetailItemNames")
                        .HasForeignKey("KpiDetailItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI1.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserEmail")
                        .HasPrincipalKey("Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KpiDetailItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAPI1.Entities.KpiItem", b =>
                {
                    b.HasOne("WebAPI1.Entities.KpiField", "KpiField")
                        .WithMany("KpiItems")
                        .HasForeignKey("KpiFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI1.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.Navigation("KpiField");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("WebAPI1.Entities.KpiItemName", b =>
                {
                    b.HasOne("WebAPI1.Entities.KpiItem", "KpiItem")
                        .WithMany("KpiItemNames")
                        .HasForeignKey("KpiItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI1.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserEmail")
                        .HasPrincipalKey("Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KpiItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAPI1.Entities.KpiReport", b =>
                {
                    b.HasOne("WebAPI1.Entities.KpiData", "KpiData")
                        .WithMany("KpiReports")
                        .HasForeignKey("KpiDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KpiData");
                });

            modelBuilder.Entity("WebAPI1.Entities.MenuRole", b =>
                {
                    b.HasOne("WebAPI1.Entities.Menu", "Menu")
                        .WithMany("MenuRoles")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("WebAPI1.Entities.Organization", b =>
                {
                    b.HasOne("WebAPI1.Entities.Organization", "ParentOrganization")
                        .WithMany("ChildOrganizations")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebAPI1.Entities.OrganizationType", "OrganizationType")
                        .WithMany("Organizations")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrganizationType");

                    b.Navigation("ParentOrganization");
                });

            modelBuilder.Entity("WebAPI1.Entities.OrganizationDomain", b =>
                {
                    b.HasOne("WebAPI1.Entities.Organization", "Organization")
                        .WithMany("Domains")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("WebAPI1.Entities.OrganizationHierarchy", b =>
                {
                    b.HasOne("WebAPI1.Entities.OrganizationType", "ChildType")
                        .WithMany("ChildHierarchies")
                        .HasForeignKey("ChildTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebAPI1.Entities.OrganizationType", "ParentType")
                        .WithMany("ParentHierarchies")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChildType");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("WebAPI1.Entities.PasswordPolicy", b =>
                {
                    b.HasOne("WebAPI1.Entities.Organization", "Organization")
                        .WithMany("PasswordPolicies")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("WebAPI1.Entities.OrganizationType", "OrganizationType")
                        .WithMany("PasswordPolicies")
                        .HasForeignKey("OrganizationTypeId");

                    b.Navigation("Organization");

                    b.Navigation("OrganizationType");
                });

            modelBuilder.Entity("WebAPI1.Entities.SuggestDate", b =>
                {
                    b.HasOne("WebAPI1.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("WebAPI1.Entities.SuggestEventType", "SuggestEventType")
                        .WithMany("SuggestDates")
                        .HasForeignKey("SuggestEventTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("SuggestEventType");
                });

            modelBuilder.Entity("WebAPI1.Entities.SuggestFile", b =>
                {
                    b.HasOne("WebAPI1.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("WebAPI1.Entities.User", "User")
                        .WithMany("SuggestFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAPI1.Entities.SuggestReport", b =>
                {
                    b.HasOne("WebAPI1.Entities.KpiField", "KpiField")
                        .WithMany("SuggestReports")
                        .HasForeignKey("KpiFieldId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WebAPI1.Entities.SuggestDate", "SuggestDate")
                        .WithMany("SuggestReports")
                        .HasForeignKey("SuggestDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI1.Entities.SuggestionType", "SuggestionType")
                        .WithMany("SuggestReports")
                        .HasForeignKey("SuggestionTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebAPI1.Entities.User", "User")
                        .WithMany("SuggestReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("KpiField");

                    b.Navigation("SuggestDate");

                    b.Navigation("SuggestionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAPI1.Entities.User", b =>
                {
                    b.HasOne("WebAPI1.Entities.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebAPI1.Entities.OrganizationType", null)
                        .WithMany("Users")
                        .HasForeignKey("OrganizationTypeId");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("WebAPI1.Entities.UserPasswordHistory", b =>
                {
                    b.HasOne("WebAPI1.Entities.User", "User")
                        .WithMany("PasswordHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAPI1.Entities.UserRole", b =>
                {
                    b.HasOne("WebAPI1.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAPI1.Entities.KpiCycle", b =>
                {
                    b.Navigation("KpiDatas");
                });

            modelBuilder.Entity("WebAPI1.Entities.KpiData", b =>
                {
                    b.Navigation("KpiReports");
                });

            modelBuilder.Entity("WebAPI1.Entities.KpiDetailItem", b =>
                {
                    b.Navigation("KpiDatas");

                    b.Navigation("KpiDetailItemNames");
                });

            modelBuilder.Entity("WebAPI1.Entities.KpiField", b =>
                {
                    b.Navigation("KpiItems");

                    b.Navigation("SuggestReports");
                });

            modelBuilder.Entity("WebAPI1.Entities.KpiItem", b =>
                {
                    b.Navigation("KpiDetailItems");

                    b.Navigation("KpiItemNames");
                });

            modelBuilder.Entity("WebAPI1.Entities.Menu", b =>
                {
                    b.Navigation("MenuRoles");
                });

            modelBuilder.Entity("WebAPI1.Entities.Organization", b =>
                {
                    b.Navigation("ChildOrganizations");

                    b.Navigation("Domains");

                    b.Navigation("PasswordPolicies");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebAPI1.Entities.OrganizationType", b =>
                {
                    b.Navigation("ChildHierarchies");

                    b.Navigation("Organizations");

                    b.Navigation("ParentHierarchies");

                    b.Navigation("PasswordPolicies");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebAPI1.Entities.SuggestDate", b =>
                {
                    b.Navigation("SuggestReports");
                });

            modelBuilder.Entity("WebAPI1.Entities.SuggestEventType", b =>
                {
                    b.Navigation("SuggestDates");
                });

            modelBuilder.Entity("WebAPI1.Entities.SuggestionType", b =>
                {
                    b.Navigation("SuggestReports");
                });

            modelBuilder.Entity("WebAPI1.Entities.User", b =>
                {
                    b.Navigation("PasswordHistory");

                    b.Navigation("SuggestFiles");

                    b.Navigation("SuggestReports");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
